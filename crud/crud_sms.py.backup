from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.sql import func
from sqlalchemy import and_, or_, update as sqlalchemy_update, desc
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta, timezone
import re
import json
from models.sms import SmsLog, UnmatchedDeposit, BalanceChangeLog
from models.deposit import DepositRequest
from models.payment import ChargeHistory, UserBalance
from models.user import User
from schemas.sms_schema import SmsLogCreate, SmsLogUpdate, SmsParsedData, ManualMatchRequest

# 4.3.1 create_sms_log h
async def create_sms_log(
    db: AsyncSession,
    sms_data: SmsLogCreate
) -> SmsLog:
    """SMS \¯ ›1"""
    
    # ı SMS ¥l (@ a+ÖêÖ+‹ pi)
    if sms_data.parsed_amount and sms_data.parsed_name and sms_data.parsed_time:
        existing_sms = await check_duplicate_sms(
            db, sms_data.parsed_amount, sms_data.parsed_name, sms_data.parsed_time
        )
        if existing_sms:
            raise ValueError("t¯ ò¨ SMSÖ»‰")
    
    sms_log = SmsLog(
        raw_message=sms_data.raw_message,
        parsed_data=sms_data.parsed_data,
        parsed_amount=sms_data.parsed_amount,
        parsed_name=sms_data.parsed_name,
        parsed_time=sms_data.parsed_time,
        processing_status=sms_data.processing_status.value,
        error_message=sms_data.error_message
    )
    
    db.add(sms_log)
    await db.commit()
    await db.refresh(sms_log)
    
    return sms_log

async def check_duplicate_sms(
    db: AsyncSession,
    amount: int,
    name: str,
    time: datetime
) -> Optional[SmsLog]:
    """ı SMS Ux"""
    result = await db.execute(
        select(SmsLog).where(
            and_(
                SmsLog.parsed_amount == amount,
                SmsLog.parsed_name == name,
                SmsLog.parsed_time == time
            )
        )
    )
    return result.scalar_one_or_none()

# 4.3.2 create_unmatched_deposit h
async def create_unmatched_deposit(
    db: AsyncSession,
    sms_log: SmsLog
) -> UnmatchedDeposit:
    """¯‰m Ö ›1"""
    unmatched_deposit = UnmatchedDeposit(
        raw_message=sms_log.raw_message,
        parsed_amount=sms_log.parsed_amount,
        parsed_name=sms_log.parsed_name,
        parsed_time=sms_log.parsed_time
    )
    
    db.add(unmatched_deposit)
    await db.commit()
    await db.refresh(unmatched_deposit)
    
    return unmatched_deposit

# 4.3.3 create_balance_change_log h
async def create_balance_change_log(
    db: AsyncSession,
    user_id: str,
    change_type: str,
    amount: int,
    balance_before: int,
    balance_after: int,
    reference_table: Optional[str] = None,
    reference_id: Optional[int] = None,
    description: Optional[str] = None
) -> BalanceChangeLog:
    """îa ¿Ω \¯ ›1"""
    balance_log = BalanceChangeLog(
        user_id=user_id,
        change_type=change_type,
        amount=amount,
        balance_before=balance_before,
        balance_after=balance_after,
        reference_table=reference_table,
        reference_id=reference_id,
        description=description
    )
    
    db.add(balance_log)
    await db.commit()
    await db.refresh(balance_log)
    
    return balance_log

# 4.3.4 get_unmatched_deposits h
async def get_unmatched_deposits(
    db: AsyncSession,
    status: Optional[str] = None,
    skip: int = 0,
    limit: int = 10
) -> List[UnmatchedDeposit]:
    """¯‰m Ö ©] på"""
    query = select(UnmatchedDeposit)
    
    if status:
        query = query.where(UnmatchedDeposit.status == status)
    
    query = query.order_by(UnmatchedDeposit.created_at.desc()).offset(skip).limit(limit)
    
    result = await db.execute(query)
    return result.scalars().all()

async def get_unmatched_deposit(
    db: AsyncSession,
    unmatched_deposit_id: int
) -> Optional[UnmatchedDeposit]:
    """¯‰m Ö på"""
    result = await db.execute(
        select(UnmatchedDeposit).where(
            UnmatchedDeposit.unmatched_deposit_id == unmatched_deposit_id
        )
    )
    return result.scalar_one_or_none()

# 4.3.5 match_deposit_manually h
async def match_deposit_manually(
    db: AsyncSession,
    match_request: ManualMatchRequest
) -> Dict[str, Any]:
    """Ÿ ‰m ò¨"""
    
    # ¯‰m Ö på
    unmatched_deposit = await get_unmatched_deposit(db, match_request.unmatched_deposit_id)
    if not unmatched_deposit:
        raise ValueError("¯‰m ÖD >D  ∆µ»‰")
    
    if unmatched_deposit.status != "unmatched":
        raise ValueError("t¯ ò¨ ÖÖ»‰")
    
    # ¨©ê t¨ Ux
    user_result = await db.execute(select(User).where(User.user_id == match_request.user_id))
    user = user_result.scalar_one_or_none()
    if not user:
        raise ValueError("¨©ê| >D  ∆µ»‰")
    
    try:
        # © ¥Ì ›1
        from crud.crud_payment import create_charge_history, get_or_create_user_balance
        from schemas.payment_schema import ChargeHistoryCreate, SourceType
        
        charge_data = ChargeHistoryCreate(
            user_id=match_request.user_id,
            amount=match_request.confirmed_amount,
            source_type=SourceType.DEPOSIT,
            description=f"Ÿ ‰m: {unmatched_deposit.parsed_name}"
        )
        
        charge_history = await create_charge_history(db, charge_data)
        
        # ¨©ê îa ≈pt∏
        user_balance = await get_or_create_user_balance(db, match_request.user_id)
        balance_before = user_balance.total_balance
        
        user_balance.add_balance(match_request.confirmed_amount, True)
        user_balance.updated_at = datetime.now(timezone.utc)
        
        # îa ¿Ω \¯ ›1
        await create_balance_change_log(
            db=db,
            user_id=match_request.user_id,
            change_type="charge",
            amount=match_request.confirmed_amount,
            balance_before=balance_before,
            balance_after=user_balance.total_balance,
            reference_table="charge_histories",
            reference_id=charge_history.charge_history_id,
            description="Ÿ ‰mD µ\ ©"
        )
        
        # ¯‰m Ö ¡‹ ≈pt∏
        unmatched_deposit.status = "matched"
        unmatched_deposit.matched_user_id = match_request.user_id
        unmatched_deposit.matched_at = datetime.now(timezone.utc)
        
        await db.commit()
        
        return {
            "success": True,
            "message": "Ÿ ‰mt DÃ»µ»‰",
            "charge_history_id": charge_history.charge_history_id,
            "charged_amount": match_request.confirmed_amount,
            "new_balance": user_balance.total_balance
        }
        
    except Exception as e:
        await db.rollback()
        raise e

# 4.3.6 CRUD 0• L§∏ - SMS Ò  ‰m h‰
async def parse_bank_sms(raw_message: str) -> SmsParsedData:
    """@â SMS Ò"""
    
    # m¸@â SMS (4 (‹)
    patterns = {
        "kb": {
            "amount": r"(\d{1,3}(?:,\d{3})*(?:\.\d+)?)–",
            "name": r"Ö\s*:\s*([^\s]+)",
            "balance": r"îa\s*:\s*(\d{1,3}(?:,\d{3})*(?:\.\d+)?)–"
        },
        "nh": {
            "amount": r"(\d{1,3}(?:,\d{3})*(?:\.\d+)?)–",
            "name": r"([^\s]+)ÿ",
            "balance": r"îa\s*(\d{1,3}(?:,\d{3})*(?:\.\d+)?)–"
        }
    }
    
    parsed_data = SmsParsedData(raw_text=raw_message)
    
    # a Ò
    for bank, pattern_set in patterns.items():
        amount_match = re.search(pattern_set["amount"], raw_message)
        if amount_match:
            amount_str = amount_match.group(1).replace(',', '')
            try:
                parsed_data.amount = int(float(amount_str))
            except ValueError:
                continue
            break
    
    # ÖêÖ Ò
    for bank, pattern_set in patterns.items():
        name_match = re.search(pattern_set["name"], raw_message)
        if name_match:
            parsed_data.deposit_name = name_match.group(1).strip()
            break
    
    # îa Ò
    for bank, pattern_set in patterns.items():
        if "balance" in pattern_set:
            balance_match = re.search(pattern_set["balance"], raw_message)
            if balance_match:
                balance_str = balance_match.group(1).replace(',', '')
                try:
                    parsed_data.balance = int(float(balance_str))
                except ValueError:
                    continue
                break
    
    # pò ‹ (¨ ‹<\ $)
    parsed_data.transaction_time = datetime.now(timezone.utc)
    
    return parsed_data

async def process_sms_message(
    db: AsyncSession,
    raw_message: str
) -> Dict[str, Any]:
    """SMS T‹¿ ¥ ò¨ \∞"""
    
    try:
        # 1. SMS Ò
        parsed_data = await parse_bank_sms(raw_message)
        
        if not parsed_data.amount or not parsed_data.deposit_name:
            # Ò ‰(
            sms_data = SmsLogCreate(
                raw_message=raw_message,
                processing_status="failed",
                error_message="SMS Ò ‰("
            )
            sms_log = await create_sms_log(db, sms_data)
            
            return {
                "success": False,
                "message": "SMS Ò– ‰(àµ»‰",
                "sms_log_id": sms_log.sms_log_id
            }
        
        # 2. SMS \¯ ›1
        sms_data = SmsLogCreate(
            raw_message=raw_message,
            parsed_data=parsed_data.dict(),
            parsed_amount=parsed_data.amount,
            parsed_name=parsed_data.deposit_name,
            parsed_time=parsed_data.transaction_time,
            processing_status="received"
        )
        
        sms_log = await create_sms_log(db, sms_data)
        
        # 3. Ö î≠ ‰m
        deposit_request = await find_matching_deposit_request(
            db, parsed_data.deposit_name, parsed_data.amount
        )
        
        if deposit_request:
            # ‰m 1ı - © ò¨
            result = await process_matched_deposit(db, sms_log, deposit_request)
            return result
        else:
            # ‰m ‰( - ¯‰m Ö<\  •
            unmatched_deposit = await create_unmatched_deposit(db, sms_log)
            
            # SMS \¯ ¡‹ ≈pt∏
            await update_sms_log_status(db, sms_log.sms_log_id, "processed")
            
            return {
                "success": True,
                "message": "Ö Ux»<ò ‰mî î≠D >D  ∆µ»‰",
                "sms_log_id": sms_log.sms_log_id,
                "unmatched_deposit_id": unmatched_deposit.unmatched_deposit_id,
                "requires_manual_matching": True
            }
            
    except Exception as e:
        return {
            "success": False,
            "message": f"SMS ò¨  $X ›: {str(e)}"
        }

async def find_matching_deposit_request(
    db: AsyncSession,
    deposit_name: str,
    amount: int,
    time_range_hours: int = 24
) -> Optional[DepositRequest]:
    """‰mî Ö î≠ >0"""
    time_threshold = datetime.now(timezone.utc) - timedelta(hours=time_range_hours)
    
    result = await db.execute(
        select(DepositRequest).where(
            and_(
                DepositRequest.deposit_name == deposit_name,
                DepositRequest.amount == amount,
                DepositRequest.status == "pending",
                DepositRequest.created_at >= time_threshold,
                DepositRequest.expires_at > datetime.now(timezone.utc)
            )
        )
    )
    return result.scalar_one_or_none()

async def process_matched_deposit(
    db: AsyncSession,
    sms_log: SmsLog,
    deposit_request: DepositRequest
) -> Dict[str, Any]:
    """‰m Ö ò¨"""
    
    try:
        from crud.crud_payment import create_charge_history, get_or_create_user_balance
        from crud.crud_deposit import mark_deposit_completed
        from schemas.payment_schema import ChargeHistoryCreate, SourceType
        
        # 1. Ö î≠ DÃ ò¨
        await mark_deposit_completed(db, deposit_request.deposit_request_id)
        
        # 2. © ¥Ì ›1
        charge_data = ChargeHistoryCreate(
            user_id=deposit_request.user_id,
            deposit_request_id=deposit_request.deposit_request_id,
            amount=deposit_request.amount,
            source_type=SourceType.DEPOSIT,
            description=f"Ö DÃ: {deposit_request.deposit_name}"
        )
        
        charge_history = await create_charge_history(db, charge_data)
        
        # 3. ¨©ê îa ≈pt∏
        user_balance = await get_or_create_user_balance(db, deposit_request.user_id)
        balance_before = user_balance.total_balance
        
        user_balance.add_balance(deposit_request.amount, True)
        user_balance.updated_at = datetime.now(timezone.utc)
        
        # 4. îa ¿Ω \¯ ›1
        await create_balance_change_log(
            db=db,
            user_id=deposit_request.user_id,
            change_type="charge",
            amount=deposit_request.amount,
            balance_before=balance_before,
            balance_after=user_balance.total_balance,
            reference_table="charge_histories",
            reference_id=charge_history.charge_history_id,
            description="Ö DÃ| µ\ ©"
        )
        
        # 5. SMS \¯ ≈pt∏
        sms_log.matched_deposit_id = deposit_request.deposit_request_id
        sms_log.processing_status = "processed"
        sms_log.updated_at = datetime.now(timezone.utc)
        
        await db.commit()
        
        return {
            "success": True,
            "message": "Öt 1ı<\ ò¨»µ»‰",
            "sms_log_id": sms_log.sms_log_id,
            "matched_deposit_id": deposit_request.deposit_request_id,
            "charge_history_id": charge_history.charge_history_id,
            "charged_amount": deposit_request.amount,
            "new_balance": user_balance.total_balance
        }
        
    except Exception as e:
        await db.rollback()
        raise e

async def update_sms_log_status(
    db: AsyncSession,
    sms_log_id: int,
    status: str,
    error_message: Optional[str] = None
) -> Optional[SmsLog]:
    """SMS \¯ ¡‹ ≈pt∏"""
    update_data = SmsLogUpdate(
        processing_status=status,
        error_message=error_message
    )
    
    update_dict = update_data.dict(exclude_unset=True)
    update_dict['updated_at'] = datetime.now(timezone.utc)
    
    await db.execute(
        sqlalchemy_update(SmsLog)
        .where(SmsLog.sms_log_id == sms_log_id)
        .values(**update_dict)
    )
    await db.commit()
    
    result = await db.execute(select(SmsLog).where(SmsLog.sms_log_id == sms_log_id))
    return result.scalar_one_or_none()

async def get_sms_logs(
    db: AsyncSession,
    status: Optional[str] = None,
    skip: int = 0,
    limit: int = 10
) -> List[SmsLog]:
    """SMS \¯ ©] på"""
    query = select(SmsLog)
    
    if status:
        query = query.where(SmsLog.processing_status == status)
    
    query = query.order_by(SmsLog.created_at.desc()).offset(skip).limit(limit)
    
    result = await db.execute(query)
    return result.scalars().all()

async def get_balance_change_logs(
    db: AsyncSession,
    user_id: Optional[str] = None,
    change_type: Optional[str] = None,
    skip: int = 0,
    limit: int = 10
) -> List[BalanceChangeLog]:
    """îa ¿Ω \¯ på"""
    query = select(BalanceChangeLog)
    
    conditions = []
    if user_id:
        conditions.append(BalanceChangeLog.user_id == user_id)
    if change_type:
        conditions.append(BalanceChangeLog.change_type == change_type)
    
    if conditions:
        query = query.where(and_(*conditions))
    
    query = query.order_by(BalanceChangeLog.created_at.desc()).offset(skip).limit(limit)
    
    result = await db.execute(query)
    return result.scalars().all()

async def cleanup_expired_unmatched_deposits(db: AsyncSession) -> int:
    """ÃÃ ¯‰m Ö ¨ (6‘ ƒ)"""
    current_time = datetime.now(timezone.utc)
    
    result = await db.execute(
        sqlalchemy_update(UnmatchedDeposit)
        .where(
            and_(
                UnmatchedDeposit.status == "unmatched",
                UnmatchedDeposit.expires_at <= current_time
            )
        )
        .values(status="ignored")
    )
    await db.commit()
    
    return result.rowcount